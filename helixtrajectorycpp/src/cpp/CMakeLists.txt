# add_executable(${PROJECT_NAME} CasADiOpti.cpp Drivetrain.cpp HolonomicDrivetrain.cpp HolonomicPath.cpp HolonomicTrajectory.cpp HolonomicTrajectoryOptimizationProblem.cpp HolonomicTrajectorySample.cpp HolonomicTrajectorySegment.cpp HolonomicWaypoint.cpp InitialGuessPoint.cpp InvalidPathException.cpp Obstacle.cpp ObstaclePoint.cpp OptimalTrajectoryGenerator.cpp Path.cpp SwerveDrivetrain.cpp SwerveModule.cpp SwerveTrajectoryOptimizationProblem.cpp TrajectoryGenerationException.cpp TrajectoryOptimizationProblem.cpp TrajectorySample.cpp Waypoint.cpp Main.cpp)
add_library(${PROJECT_NAME} SHARED CasADiOpti.cpp Drivetrain.cpp HolonomicDrivetrain.cpp HolonomicPath.cpp HolonomicTrajectory.cpp HolonomicTrajectoryOptimizationProblem.cpp HolonomicTrajectorySample.cpp HolonomicTrajectorySegment.cpp HolonomicWaypoint.cpp InitialGuessPoint.cpp InvalidPathException.cpp Obstacle.cpp ObstaclePoint.cpp OptimalTrajectoryGenerator.cpp Path.cpp SwerveDrivetrain.cpp SwerveModule.cpp SwerveTrajectoryOptimizationProblem.cpp TrajectoryGenerationException.cpp TrajectoryOptimizationProblem.cpp TrajectorySample.cpp Waypoint.cpp JNI.cpp)

target_include_directories(${PROJECT_NAME} PRIVATE ${CASADI_DIR}/include)
target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/jni)
if(APPLE)
    target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/jni/darwin)
    install(FILES ${CASADI_DIR}/libcasadi.dylib ${CASADI_DIR}/libc++.1.dylib  ${CASADI_DIR}/libcasadi_nlpsol_ipopt.dylib ${CASADI_DIR}/libgfortran.4.dylib           ${CASADI_DIR}/libquadmath.0.dylib ${CASADI_DIR}/libgcc_s.1.dylib   DESTINATION "lib/")
    install(FILES ${CASADI_DIR}/libcasadi.dylib ${CASADI_DIR}/libc++.1.dylib  ${CASADI_DIR}/libcasadi_nlpsol_ipopt.dylib ${CASADI_DIR}/libgfortran.4.dylib           ${CASADI_DIR}/libquadmath.0.dylib ${CASADI_DIR}/libgcc_s.1.dylib   DESTINATION ${CMAKE_SOURCE_DIR}/helixtrajectoryj/src/main/resources)
elseif(UNIX)
    target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/jni/linux)
    install(FILES ${CASADI_DIR}/libcasadi.so                                  ${CASADI_DIR}/libcasadi_nlpsol_ipopt.so    ${CASADI_DIR}/libgfortran-ed201abd.so.3.0.0                                                                    DESTINATION "lib/")
    install(FILES ${CASADI_DIR}/libcasadi.so                                  ${CASADI_DIR}/libcasadi_nlpsol_ipopt.so    ${CASADI_DIR}/libgfortran-ed201abd.so.3.0.0                                                                    DESTINATION ${CMAKE_SOURCE_DIR}/helixtrajectoryj/src/main/resources)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "MINGW")
    target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/jni/win32)
    install(FILES ${CASADI_DIR}/libcasadi.dll   ${CASADI_DIR}/libstdc++-6.dll ${CASADI_DIR}/libcasadi_nlpsol_ipopt.dll   ${CASADI_DIR}/libgfortran-3.dll             ${CASADI_DIR}/libquadmath-0.dll   ${CASADI_DIR}/libgcc_s_seh-1.dll DESTINATION "lib/")
    install(FILES ${CASADI_DIR}/libcasadi.dll   ${CASADI_DIR}/libstdc++-6.dll ${CASADI_DIR}/libcasadi_nlpsol_ipopt.dll   ${CASADI_DIR}/libgfortran-3.dll             ${CASADI_DIR}/libquadmath-0.dll   ${CASADI_DIR}/libgcc_s_seh-1.dll DESTINATION ${CMAKE_SOURCE_DIR}/helixtrajectoryj/src/main/resources)
endif()

target_link_directories(${PROJECT_NAME} PRIVATE ${CASADI_DIR})
target_link_libraries(${PROJECT_NAME} PRIVATE casadi)

target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_SOURCE_DIR}/helixtrajectorycpp/src/include)

install(TARGETS ${PROJECT_NAME} DESTINATION "")
install(TARGETS ${PROJECT_NAME} DESTINATION ${CMAKE_SOURCE_DIR}/helixtrajectoryj/src/main/resources)